syntax = "proto3";

package bds.evm;
option go_package = "github.com/blockchain-data-standards/manifesto/evm";

import "models.proto";

// Service for standard EVM RPC operations
// Equivalent to Ethereum JSON-RPC methods for node interactions
service RPCQueryService {
  rpc ChainId(ChainIdRequest) returns (ChainIdResponse);

  // Get a block by its number (equivalent to eth_getBlockByNumber)
  rpc GetBlockByNumber(GetBlockByNumberRequest) returns (GetBlockResponse);
  
  // Get a block by its hash (equivalent to eth_getBlockByHash)
  rpc GetBlockByHash(GetBlockByHashRequest) returns (GetBlockResponse);
  
  // Get logs matching filter criteria (equivalent to eth_getLogs)
  rpc GetLogs(GetLogsRequest) returns (GetLogsResponse);
  
  // Get a transaction by its hash (equivalent to eth_getTransactionByHash)
  rpc GetTransactionByHash(GetTransactionByHashRequest) returns (GetTransactionByHashResponse);
  
  // Get a transaction receipt by its hash (equivalent to eth_getTransactionReceipt)
  rpc GetTransactionReceipt(GetTransactionReceiptRequest) returns (GetTransactionReceiptResponse);
  
  // Get all transaction receipts for a block (equivalent to eth_getBlockReceipts)
  rpc GetBlockReceipts(GetBlockReceiptsRequest) returns (GetBlockReceiptsResponse);
}

// Request for getting the chain ID
message ChainIdRequest {
}

// Response containing the chain ID
message ChainIdResponse {
  // EIP-155 chain ID
  uint64 chainId = 1;
  bytes genesisHash = 2;
}

// Request for getting a block by number
message GetBlockByNumberRequest {
  // The block number to retrieve (hex number or "latest", "earliest", "pending" tags)
  string blockNumber = 1;
  
  // Whether to include full transaction details (if false, only transaction hashes are returned)
  bool includeTransactions = 2;

  // Optional chain ID to use for the request
  optional uint64 chainId = 3;

  // Optional genesis hash to narrow down identical networks with the same chain ID
  optional bytes chainGenesisHash = 4;
}

// Request for getting a block by hash
message GetBlockByHashRequest {
  // The block hash to retrieve
  bytes blockHash = 1;
  
  // Whether to include full transaction details (if false, only transaction hashes are returned)
  bool includeTransactions = 2;

  // Optional chain ID to use for the request
  optional uint64 chainId = 3;

  // Optional genesis hash to narrow down identical networks with the same chain ID
  optional bytes chainGenesisHash = 4;
}

// Response containing the requested block
message GetBlockResponse {
  // The requested block, null if not found
  BlockHeader block = 1;
  
  // Transaction data (format depends on includeTransactions flag in request)
  // If includeTransactions is false, this contains transaction hashes (32 bytes each)
  // If includeTransactions is true, this should be empty and fullTransactions field should be used
  repeated bytes transactions = 2;

  // Optional chain ID to use for the request
  optional uint64 chainId = 5;

  // Optional genesis hash to narrow down identical networks with the same chain ID
  optional bytes chainGenesisHash = 6;
  
  // Full transaction objects (only populated when includeTransactions is true)
  repeated Transaction fullTransactions = 7;

  // Withdrawals (only populated when includeTransactions is true)
  repeated Withdrawal withdrawals = 8;
}

// Request for getting logs
message GetLogsRequest {
  // Starting block number (inclusive)
  optional uint64 fromBlock = 1;
  
  // Ending block number (inclusive)
  optional uint64 toBlock = 2;
  
  // Contract addresses to filter by (empty means all addresses)
  repeated bytes addresses = 3;
  
  // Topics to filter by (each position can have multiple possible values)
  // topics[0] is an array of possible values for the first topic
  // topics[1] is an array of possible values for the second topic, etc.
  repeated TopicFilter topics = 4;
  
  // Block hash to filter by (alternative to fromBlock/toBlock)
  optional bytes blockHash = 5;

  // Optional chain ID to use for the request
  optional uint64 chainId = 6;

  // Optional genesis hash to narrow down identical networks with the same chain ID
  optional bytes chainGenesisHash = 7;
}

// Filter for log topics at a specific position
message TopicFilter {
  // Possible values for this topic position (OR condition)
  repeated bytes values = 1;
}

// Response containing matching logs
message GetLogsResponse {
  // Array of logs matching the filter criteria
  repeated Log logs = 1;
}

// Request for getting a transaction by hash
message GetTransactionByHashRequest {
  // The transaction hash to retrieve
  bytes transactionHash = 1;

  // Optional chain ID to use for the request
  optional uint64 chainId = 2;

  // Optional genesis hash to narrow down identical networks with the same chain ID
  optional bytes chainGenesisHash = 3;
}

// Response containing the requested transaction
message GetTransactionByHashResponse {
  // The requested transaction, null if not found
  Transaction transaction = 1;
}

// Request for getting a transaction receipt
message GetTransactionReceiptRequest {
  // The transaction hash to retrieve receipt for
  bytes transactionHash = 1;

  // Optional chain ID to use for the request
  optional uint64 chainId = 2;

  // Optional genesis hash to narrow down identical networks with the same chain ID
  optional bytes chainGenesisHash = 3;
}

// Response containing the requested transaction receipt
message GetTransactionReceiptResponse {
  // The requested receipt, null if not found
  Receipt receipt = 1;
}

// Request for getting all receipts in a block
message GetBlockReceiptsRequest {
  // Block number as hex string (e.g., "0x14ee0030") or tag ("latest", "earliest", "pending")
  string blockNumber = 1;
  
  // Optional chain ID to use for the request
  optional uint64 chainId = 2;
  
  // Optional genesis hash to narrow down identical networks with the same chain ID
  optional bytes chainGenesisHash = 3;
}

// Response containing all receipts for the requested block
message GetBlockReceiptsResponse {
  // Array of receipts for all transactions in the block
  repeated Receipt receipts = 1;
}
